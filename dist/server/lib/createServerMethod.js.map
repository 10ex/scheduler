{"version":3,"sources":["../../../src/server/lib/createServerMethod.js"],"names":["createServerMethod","routine","request","h","Future","go","bind","promise","catch","err","console","log"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;AAOA,MAAMA,kBAAkB,GAAGC,OAAO,IAAI,CAACC,OAAD,EAAUC,CAAV,KAAgBC,MAAM,CACzDC,EADmD,CAChDJ,OAAO,CAACK,IAAR,CAAaL,OAAb,EAAsBC,OAAtB,EAA+BC,CAA/B,CADgD,EAEnDI,OAFmD,GAGnDC,KAHmD,CAG5CC,GAAD,IAAS;AACdC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,SAAOA,GAAP;AACD,CANmD,CAAtD;;eAQeT,kB","sourcesContent":["import * as Future from 'fluture';\n\n/**\n *\n * @param {() => IterableIterator<any>} routine\n *  this function takes a generator method that expects a request object and\n * returns a server method that either replys with an error if\n *  the generator resolves a rejection or success if it does not\n */\nconst createServerMethod = routine => (request, h) => Future\n  .go(routine.bind(routine, request, h))\n  .promise()\n  .catch((err) => {\n    console.log(err);\n    return err;\n  });\n\nexport default createServerMethod\n"],"file":"createServerMethod.js"}